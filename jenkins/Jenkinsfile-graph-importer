// This Jenkinsfile is used by Jenkins to run the GenerateGraphDatabaseAndAnalysisCore step of Reactome's release.
// It requires that the BioModels step has been run successfully before it can be run.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline {
	agent any

	stages {
		// This stage checks that an upstream project, BioModels, was run successfully for its last build.
		stage('Check OrthoinferenceStableIdentifierHistory build succeeded'){
			steps{
				script{
					utils.checkUpstreamBuildsSucceeded("Relational-Database-Updates/job/OrthoinferenceStableIdentifierHistory")
				}
			}
		}

		// Graph database needs to be generated from a MySQL database called 'reactome' for the analysis core file.
		stage('Setup: Create reactome database from release_current') {
			steps{
				script{
					withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]) {
						def releaseCurrentDumpName = utils.takeDatabaseDumpAndGzip("${env.RELEASE_CURRENT_DB}", "generate_graph_db", "before", "${env.RELEASE_SERVER}")
						utils.replaceDatabase("${env.REACTOME_DB}", "${releaseCurrentDumpName}")
					}
				}
			}
		}

		// This stage generates the graph database using the graph-importer module, and replaces the current graph db with it.
		stage('Main: Generate Graph Database'){
			steps{
				script{
					// Gets a copy of 'changeGraphDatabase', which Jenkins can execute as sudo. Changes permissions of file to user read/write only.
					utils.cloneOrUpdateLocalRepo("release-jenkins-utils")
					sh "cp -f release-jenkins-utils/scripts/changeGraphDatabase.sh ${env.JENKINS_HOME_PATH}"
					sh "chmod 700 ${env.JENKINS_HOME_PATH}/changeGraphDatabase.sh"
					utils.cloneOrUpdateLocalRepo("graph-importer")

					dir("graph-importer"){
						sh "git checkout feature/new-pwb"
						// Builds jar file for graph-importer
						utils.buildJarFileWithPackage()

						// This generates the graph database.
						withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
                                                        sh "if [ ! -f /home/awright/intact/intact-micluster.txt ]; then bash /home/awright/intact/get-the-latest-file.sh; fi"
                                                        sh "java -jar target/GraphImporter-exec.jar --intactFile /home/awright/intact/intact-micluster.txt --name ${env.REACTOME_DB} --user $user --password $pass --neo4j /tmp/graph.db --interactions"
							sh "cp -r /tmp/graph.db/ ."
							// tomcat and neo4j services need to be restarted so that Pathway Browser on Release server is updated.
							sh "sudo service tomcat9 stop"
							sh "sudo service neo4j stop"

							// This static script adjusts permissions of the graph.db folder and moves it to /var/lib/neo4j/data/databases/.
							sh "sudo bash ${env.JENKINS_HOME_PATH}/changeGraphDatabase.sh"
							sh "sudo service neo4j start"
							sh "sudo service tomcat9 start"
							sh "rm ${env.JENKINS_HOME_PATH}/changeGraphDatabase.sh"
						}
					}
				}
			}
		}

		// This stage runs the graph-qa script. Summary report generated by this will be emailed.
		stage('Post: Run graph-qa'){
			steps{
				script{
					utils.cloneOrUpdateLocalRepo("graph-qa")
					dir("graph-qa"){
						sh "git checkout feature/reactome-parent-1.0.5"
						// Build jar file for graph-qa repository.
						utils.buildJarFileWithPackage()

						// Sleep to ensure neo4j has time to restart
						sh "sleep 30"
						withCredentials([usernamePassword(credentialsId: 'neo4jUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]){
							sh "java -jar target/graph-qa-exec.jar -u $user -p $pass --verbose"
						}
					}
				}
			}
		}

		// This stage emails the contents of the GraphQA_Summary_vXX.csv, and informs that the graph database is now on release. 
		stage('Post: Email graph-qa output'){
			steps{
				script{
					def releaseVersion = utils.getReleaseVersion()
					def previousReleaseVersion = utils.getPreviousReleaseVersion()
					
					def emailSubject = "v${releaseVersion} graph database available on release.reactome.org"
					def emailBody = "Hello,\n\nThis is an automated message from Jenkins regarding an update for v${releaseVersion}. The relational database updates have completed and the graph database has been generated. It should be visible at https://release.reactome.org. This is NOT the final release email. \n\nv${releaseVersion} data is visible in: \n\t- Details pages\n\t- Analysis service \n\t- Content service \n\nv${previousReleaseVersion} data is still visible in: \n\t- Downloadable files \n\t- Searching \n\t- Diagrams \n\nYou can navigate the Pathway Browser as well to see details, though just be aware that new/updated diagrams are not yet visible. Please notify the developer running release if you notice any issues. Do NOT reply to this email. \n\nThanks!"
					def emailAttachment = "graph-qa/reports/GraphQA_Summary_v${releaseVersion}.csv"

					utils.sendEmailWithAttachment("$emailSubject", "$emailBody", "$emailAttachment")
				}
			}
		}
		// Archive everything produced by this step on S3.
		stage('Post: Archive Outputs'){
			steps{
				script{
					def releaseVersion = utils.getReleaseVersion()

					// Creates tar archive out of 'graph.db/' folder that exists in graph-importer folder.
					dir("graph-importer"){
						utils.createGraphDatabaseTarFile("graph.db/", "graph_db")
					}

					sh "mv graph-importer/graph_db_graph_database.dump* ."

					def dataFiles = ["/home/awright/intact/intact-micluster.txt"]
					def logFiles = ["graph-importer/parser-messages.txt", "graph-importer/logs/*", "graph-qa/logs/*", "graph-qa/reports/*"]
					def foldersToDelete = ["graph-importer*", "graph-/home/awright/intact/intact-micluster.txtqa*","release-jenkins-utils*"]

					utils.cleanUpAndArchiveBuildFiles("graph_db_analysis_core", dataFiles, logFiles, foldersToDelete)
				}
			}
		}
	}
}
