import org.reactome.release.jenkins.utilities.Utilities

def utils = new Utilities()

pipeline {
    agent any
    
    stages {
        stage('Check prior steps build succeeded') {
            steps {
                script {
                    utils.checkUpstreamBuildsSucceeded("SearchIndexer")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/DownloadDirectory/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/DataExport/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/DiagramConverter/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/DiagramExporter/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/EventPDF/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/FireworksLayout/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/InteractionExporter/")
                    utils.checkUpstreamBuildsSucceeded("File-Generation/job/SBMLExporter/")
                }
            }
        }

        stage('Dump MySQL databases') {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    def release_current_final_filename = "${release_number}_release_current_final.sql"
                    withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        utils.takeDatabaseDump('release_current', release_current_final_filename, 'localhost')
                    }
                    sh "gzip ${release_current_final_filename}"
                    sh "aws s3 --no-progress cp ${release_current_final_filename}.gz ${env.S3_RELEASE_DIRECTORY_URL}/${release_number}/${release_number}_release_current_final.sql.gz"
                }
            }
        }
       
        stage('Update \'current\' database') {
            steps {
                script
                {
                    def release_number = utils.getReleaseVersion()
                    def release_current_final_filename = "${release_number}_release_current_final.sql.gz"
                    withCredentials([usernamePassword(credentialsId: 'mySQLUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')]) {
                        sh "zcat ${release_current_final_filename} | mysql -u${user} -p${pass} current"
                    }
                    sh "rm ${release_current_final_filename}"
                }
            }
        }

        stage('Create Neo4J database dump') {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    sh "sudo service neo4j stop"
                    sh "sudo neo4j-admin dump --database=graph.db --to=${env.ABS_DOWNLOAD_PATH}/${release_number}/reactome.graphdb.dump"
                    sh "sudo service neo4j start"
                }
            }
        }

        stage("create neo4j docker image") {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    dir("/home/awright/gitroot/reactome_neo4j_env") {
                        sh "sed -i \"s/ReleaseXX/Release${release_number}/g\" Makefile"
                        sh "cp ${env.ABS_DOWNLOAD_PATH}/${release_number}/reactome.graphdb.dump ."
                        sh "make create-data-image"
                        sh "make push-to-dockerhub"
                        sh "sed -i \"s/Release${release_number}/ReleaseXX/g\" Makefile"
                    }
                }
            }
        }

        stage("Upload docker image to Amazon ECR") {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    sh """
                        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
                        docker push public.ecr.aws/reactome/graphdb:Release${release_number}
                        docker push public.ecr.aws/reactome/graphdb:latest
                        docker logout public.ecr.aws
                    """
                }
            }
        }

        stage("Create disease to variant file") {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    dir("/home/awright/sandbox/disease-variant-ewas-mapping") {
                        sh "docker run --name reactome-neo4j-v${release_number} -p 7475:7474 -p 7688:7687 -e NEO4J_dbms_memory_heap_maxSize=8g -d reactome/graphdb:Release${release_number}"
                        sh "sleep 20"
                        sh "source venv/bin/activate; python3 src/create-disease-tsv-df.py"
                        sh "docker rm -f reactome-neo4j-v${release_number}"
                        sh "mv disease_variant_ewas_mapping.tsv ${env.ABS_DOWNLOAD_PATH}/${release_number}/"
                     }
                }
            }
        }

        stage("Download directory maintenance") {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    def previous_number = utils.getPreviousReleaseVersion()
                    dir(env.ABS_DOWNLOAD_PATH) {
                        sh "sudo rm -r ${previous_number}"
                        sh "sudo chown -R www-data:reactome ${release_number}/"
                    }
                }
            }
        }

        stage('Archive download directory') {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    sh "tar -czf ${release_number}-download.tgz ${env.ABS_DOWNLOAD_PATH}/${release_number}/"
                    sh "aws s3 --no-progress cp ${release_number}-download.tgz ${env.S3_RELEASE_DIRECTORY_URL}/${release_number}/${release_number}-download.tgz"
                    sh "rm ${release_number}-download.tgz"
                }
            }
        }

        stage('Sync download directory to S3') {
            steps {
                script {
                    def release_number = utils.getReleaseVersion()
                    sh "aws s3 sync ${env.ABS_DOWNLOAD_PATH}/${release_number}/ s3://download.reactome.org/${release_number}/"
                }
            }
        } 
    }
}
