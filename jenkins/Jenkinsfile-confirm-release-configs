// This Jenkinsfile is used by Jenkins to run the ConfirmReleaseConfigs step, now a part of Reactome's release.
// This is the first step of release now. It is an attempt to ensure that all configurations for release have been set, and that they match.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline{
	agent any

	stages{
		// This takes user inputs in to confirm that the configuration file and environmental variables used be Jenkins have been updated for this release.
		// After the user inputs, it executes a bash script that checks the values to confirm that they all match.
		stage('Confirm configurations'){
			steps{
				// This asks for confirmation the configuration file has been updated for this release.
				// This is a locally-scoped secret file accessed at Jenkins -> Releases -> ## (release number) -> Credentials -> Config
				script{
					def userInput = input(
					id: 'userInput', message: "Have the Config file credentials been set up for this release?",
					parameters: [
						[$class: 'BooleanParameterDefinition', defaultValue: true, name: 'response']
					])

					if (!userInput){
						error("Please update the config file for this release and upload it in Jenkins as a secret file credential. Please have the credential scoped to this folder. If unsure, check Release documentation (enter 'n' to abort here, if desired).")
					}
				}
			}
		}
		stage('Input Release number'){
			steps{
				dir('scripts'){
					script{
						// This asks for the release number. Afterwards this input, along with the config file and environmental variables for
						// release and previous release numbers are checked in a bash file to confirm they all match.
						def userReleaseNumber = input(
						id: 'userInput', message: "Enter release version number.",
						parameters: [
													[$class: 'TextParameterDefinition', defaultValue: '', name: 'response']
												])

						def releaseVersion = utils.getReleaseVersion()
						def previousReleaseVersion = utils.getPreviousReleaseVersion()
						withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')]){
							sh "bash confirmJenkinsConfigurations.sh --config-file $ConfigFile --jenkins-current-release-number ${releaseVersion} --jenkins-previous-release-number ${previousReleaseVersion} --user-release-number $userReleaseNumber"
						}
					}
				}
			}
		}
	}
}
